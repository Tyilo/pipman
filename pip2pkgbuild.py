# pkgname=python-mechanicalsoup
# pkgver=0.2.1
# pkgrel=1

import subprocess
import re
import os
import virtualenv

from misc import VENV_DIR, VENV_PIP, ENCODING, DEVNULL
from misc import PYTHON_VERSION, blacklist
from log import Log


class Pip2Pkgbuild():

    log = Log()

    def __init__(self, packages):
        # start virtualenv
        self.__create_virtualenv__()

        # intialize packages variable
        self.packages = {}

        # install and create package dict
        for pack in packages:
            if pack in blacklist:
                continue

            self.install_in_venv(pack)

            self.packages[pack] = Pip2Pkgbuild.compile_package_info(pack)
            self.packages[pack]['pack'] = pack
            self.packages[pack]['pkgname'] = "python-%s" % pack

    def __create_virtualenv__(self):
        """Create virtualenv to install packages"""

        Pip2Pkgbuild.log.info("Preparing virtualenv")
        virtualenv.create_environment(VENV_DIR,
                                      no_wheel=True)

    def generate_all(self, prefix='.'):
        """Generate package/PKGBUILD for every package in self.packages"""

        # check if directories don't exist
        for pack in self.packages:
            pack = self.packages[pack]
            dir = os.path.join(prefix, pack['pkgname'])
            if os.path.exists(dir):
                print("Directory '%s' already exists" % dir)
                quit()

            # store directory in package dict
            self.packages[pack['pack']]['dir'] = dir

        # generate the package build and store in package/PKGBUILD
        for pack in self.packages:
            pack = self.packages[pack]
            pkgbuild = Pip2Pkgbuild.__generate_pkgbuild__(pack)
            os.makedirs(pack['dir'])

            with open(os.path.join(pack['dir'], 'PKGBUILD'), 'w') as f:
                f.write(pkgbuild)

    @staticmethod
    def install_in_venv(package):
        """Install package in virtualenv"""
        Pip2Pkgbuild.log.info("Installing '%s' in virutalenv" % package)

        # install package in virtualenv pip
        subprocess.check_call([VENV_PIP,
                               'install',
                               '--disable-pip-version-check',
                               package])

    @staticmethod
    def __generate_pkgbuild__(package_info):
        """Generate PKGBUILD for package"""
        Pip2Pkgbuild.log.info("Generating pkgbuild for %s"
                              % package_info['pack'])

        # regex to match version and release
        ver_rel = re.search("(\d+(?:\.\d+)+)(?:-(\d+))?",
                            package_info['Version'])

        version = ver_rel.group(1)
        release = ver_rel.group(2)

        if not release:
            release = '1'

        # store the pkgbuild output variable in 'lines' var
        lines = []

        lines.append('# PKGBUILD generated by pipman')
        lines.append('# Python package author: %s <%s>'
                     % (package_info['Author'], package_info['Author-email']))
        lines.append('pkgname=%s' % package_info['pkgname'])
        lines.append('pkgver=%s' % version)
        lines.append('pkgrel=%s' % release)

        lines.append('pkgdesc="%s"' % package_info['Summary'])
        lines.append('arch=(any)')
        lines.append('url="%s"' % package_info['Home-page'])
        lines.append('license="%s"' % package_info['License'])
        lines.append('depends=("python" "python-pip")')

        lines.append('build() {')
        lines.append('  pip install --no-deps --target="%s" %s'
                     % (package_info['pack'], package_info['pack']))
        lines.append('}')

        lines.append("package() {")
        lines.append('  mkdir -p $pkgdir/usr/lib/python%s/site-packages/'
                     % (PYTHON_VERSION))
        lines.append(('  cp -r $srcdir/%s/* ' +
                      '$pkgdir/usr/lib/python%s/site-packages/')
                     % (package_info['pack'],
                        PYTHON_VERSION))
        lines.append('}')

        return "\n".join(lines)

    @staticmethod
    def compile_package_info(package):
        """Store 'pip show package' in dict"""
        Pip2Pkgbuild.log.info("Checking package info")

        info = subprocess.check_output([VENV_PIP, 'show', package],
                                       stderr=DEVNULL)

        # we need to encode terminal output
        info = info.decode(ENCODING)

        # regex to match the values before and after :
        info = re.findall("^([\w-]+): (.*)$", info, re.MULTILINE)

        info_dict = {}

        for i in info:
            info_dict[i[0]] = i[1]

        return info_dict
